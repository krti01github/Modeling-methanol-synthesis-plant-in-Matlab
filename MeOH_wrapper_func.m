% Wrapper function for enabling to optimize the pulp mill case in MeOH
% synthesis.
% Author: Kristian Tiiro
% Date 24.4.2024

% Sources: [Gardasdottir, Normann, Andersson, Johnsson, 2014, "Process 
%           Evaluation of CO2 Capture in three Industrial case Studies",
%           DOI: 10.1016/j.egypro.2014.11.693]
%
% Bio-CCU project
% Author: Kristian Tiiro
% Date: 1.12.2023

% IN ARRAYS REPRESENTING ALL SIX CHEMICAL COMPONENTS AS ROW ELEMENTS, 
% THE ORDER IS:
% [1.CO2, 
% 2.CO, 
% 3.H2, 
% 4.H2O, 
% 5.CH3OH, 
% 6.N2]

function y = MeOH_wrapper_func(d, u)

% --- Default Initialization ---------------------------------------------

% Default parameters
[M, R, ht_cpc_coeffs_gas_twoT, ht_cpc_coeffs_gas_oneT, ...
    ht_cpc_coeffs_liquid_oneT, ht_vaporiz_coeffs, thrm_cond_coeffs_gas, ...
    wagner_coeffs_H2O, ...
    z_tot, N_tubes, r_tube_out, r_tube_in, ...
    roo_cat, r_cat, ... 
    eps_b, eps_cat_tort, r_pore, ...
    A_B_k_red, sigma_v, const_K_pseudo_eq, ...
    T_ref, E_deac, K_deac, m_deac, ...
    delta_H, v_reac, ...
    c_myy, lambda_tube_wall, ...
    w, T_crit, P_crit, Z_crit, roo_crit, ...
    a_pr_eos_Tc, b_pr_eos_Tc, K_init, ...
    gamma, eta_CP1, ...
    W_feed_CP_per_kgs, Q_feed_CP_per_kgs, W_dist_per_kgs, ...
    Q_dist_per_kgs, x_mass_product, x_mass_dist_bot, ...
    P_product, T_product, P_dist_bot, T_dist_bot] = parameters_default();

% Default manipulated variables
[P_F, T_F, y_mass_F, m_dot_F, T_HE1, T_shell, T_HE2, ...
    r_R_max] = manipulated_variables_default(M);

% Default initial values
[m_dot_CP1, y_mass_CP1, T_CP1, z_cat, a_cat_t, q_dot_tube] = ...
    initial_values_default(r_R_max, m_dot_F, y_mass_F, M, T_HE2, z_tot);

% --- Pulp mill case parameters and variables ----------------------------

t_d_0 = 0;
t_d_step = 7;
t_d_final = 0*t_d_step;
t_span = t_d_0:t_d_step:t_d_final;
t_first = -99;      % Don't want results saved
t_last = -99;       % -- || --   
case_name = 'pulp_mill_optimized_case';
ode45_max_step = z_tot / 100;
delta_T_limit = 0.2; % [K]
delta_results_tol = 10^(-4);   % [10*kg / s] / [-]
max_iters = 200;    % [-]
alpha = 1.00;

% CO2 capture membrane permeate, [mol / s]
n_dot_Perm = d{1};
% Molar fractions of CO2 capture membrane permeate, [-]
% The components are different than in other arrays,
y_molar_Perm = d{2};  % [CO2; N2; O2; H2O]

[N_tubes, ...
y_mass_F, m_dot_F, T_HE1, T_shell, r_R_max, ...
m_dot_CP1, y_mass_CP1] = params_man_vars_init_pulp_mill_opt( ...
n_dot_Perm, y_molar_Perm, M, r_tube_in, roo_cat, eps_b, z_tot);

% y_mass_CP1 = [0.322451827197916;
%               0.096636441362835;
%               0.147560399663220;
%               0.001526502704664;
%               0.010264753002406;
%               0.421560076068960];

T_HE1 = u(1);
T_shell = u(2);
r_R_max = u(3);

% --- Solve the results --------------------------------------------------

% Initialize index
i = 0;
% Total steps
N_steps = (t_d_final - t_d_0) / t_d_step;
% Number of chemical components
N_i = size(M, 1);
% Initialize arrays for logging results
m_dot_liquid_KO1 = zeros(1, N_steps);
x_mass_KO1 = zeros(N_i, N_steps);
P_KO1 = zeros(1, N_steps);
T_KO1 = zeros(1, N_steps);
m_dot_purge = zeros(1, N_steps);
y_mass_purge = zeros(N_i, N_steps);    
Q_HE1 = zeros(1, N_steps);
Q_reactor = zeros(1, N_steps);
Q_HE2 = zeros(1, N_steps);
W_CP1 = zeros(1, N_steps);
T_tube_avg = zeros(1, N_steps);
T_tube_max = zeros(1, N_steps);
r_avg = zeros(2, N_steps);
eta_reac_avg = zeros(2, N_steps);
a_cat_avg = zeros(1, N_steps);

for t_d = t_span

    i = i+1;    % for saving results in arrays

    % Calculate average catalyst activity
    a_cat_t_avg = mean(a_cat_t, 2);
    % Log average catalyst activity for current time instance
    a_cat_avg(:, i) = a_cat_t_avg;

    % Solve steady-state synthesis loop until no significant change    
    [m_dot_liquid_KO1_t, x_mass_KO1_t, P_KO1_t, T_KO1_t, m_dot_purge_t, ...
    y_mass_purge_t, P_purge_t, T_purge_t, Q_HE1_t, Q_reactor_t, ...
    Q_HE2_t, W_CP1_t, z_span_t, T_tube_t, P_tube_t, y_mass_tube_t, ... 
    r_avg_t, eta_reac_avg_t, m_dot_CP1, y_mass_CP1] ...
    = solve_steady_state_loop ...
        (z_cat, a_cat_t, ...
        M, R, ht_cpc_coeffs_gas_twoT, ht_cpc_coeffs_gas_oneT, ...
        ht_cpc_coeffs_liquid_oneT, ht_vaporiz_coeffs, ...
        thrm_cond_coeffs_gas, wagner_coeffs_H2O, ...
        z_tot, N_tubes, r_tube_out, r_tube_in, ...
        roo_cat, r_cat, ...
        eps_b, eps_cat_tort, r_pore, ...
        A_B_k_red, sigma_v, const_K_pseudo_eq, ...
        delta_H, v_reac, ...
        c_myy, lambda_tube_wall, ...
        w, T_crit, roo_crit, ...
        a_pr_eos_Tc, b_pr_eos_Tc, K_init, ...
        gamma, eta_CP1, ...
        P_F, T_F, y_mass_F, m_dot_F, T_HE1, ...
        T_shell, T_HE2, r_R_max, m_dot_CP1, y_mass_CP1, T_CP1, ...
        q_dot_tube, ode45_max_step, delta_T_limit, delta_results_tol, ...
        max_iters, alpha, t_d, t_first, t_last, case_name);

    % Calculating catalyst activity of next time step, assuming
    % the temperature profile solved, remains constant for t_d_step days
    delta_t_h = t_d_step * 24;   % [h]
    [z_cat, a_cat_t] = catalyst_deactivation(z_tot, delta_t_h, ...
        z_span_t, T_tube_t, P_tube_t, y_mass_tube_t, ...
        T_ref, E_deac, K_deac, m_deac, R, M, a_cat_t);
    
    % Log rest of the results
    m_dot_liquid_KO1(:, i) = m_dot_liquid_KO1_t;
    x_mass_KO1(:, i) = x_mass_KO1_t;
    P_KO1(:, i) = P_KO1_t;
    T_KO1(:, i) = T_KO1_t;
    m_dot_purge(:, i) = m_dot_purge_t;
    y_mass_purge(:, i) = y_mass_purge_t;
    Q_HE1(:, i) = Q_HE1_t;
    Q_reactor(:, i) = Q_reactor_t;
    Q_HE2(:, i) = Q_HE2_t;   
    W_CP1(:, i) = W_CP1_t;
    T_tube_avg(:, i) = mean(T_tube_t, 2);
    T_tube_max(:, i) = max(T_tube_t);
    r_avg(:, i) = r_avg_t;
    eta_reac_avg(:, i) = eta_reac_avg_t;
    
end

% --- Purification section streams ---------------------------------------

% [Van-Dal, 2013]
P_gas_KO2 = P_product;         % [Pa]
T_gas_KO2 = T_product;         % [K]

[m_dot_gas_KO2, y_mass_KO2, m_dot_product, m_dot_dist_bot] = ...
    purif_streams(m_dot_liquid_KO1, x_mass_KO1, x_mass_product, ...
    x_mass_dist_bot);

% Molar fractions, [-], matrix
y_molar_KO2 = zeros(size(y_mass_KO2));
for t = 1:size(y_mass_KO2, 2)
    y_molar_KO2(:, t) = mass_fractions_into_molar_fractions(...
        y_mass_KO2(:, t), M);
end

% --- Estimating energy consumption of non-simulated ---------------------

% Feed compression
% [kW], row vector
W_feed_CP = m_dot_F(1, :) * W_feed_CP_per_kgs;
Q_feed_CP = m_dot_F(1, :) * Q_feed_CP_per_kgs;

% Distillation and other post-processing after KO1
% [kW], row vector
W_dist = m_dot_product(1, :) * x_mass_product(5, :) * W_dist_per_kgs;
Q_dist = m_dot_product(1, :) * x_mass_product(5, :) * Q_dist_per_kgs;

% --- Net energy consumption of the whole process ------------------------

% Heating rate required, [kW], row vector
Q_net = Q_feed_CP + Q_HE1 + Q_reactor + Q_HE2 + Q_dist;
% Electrical energy rate required [kW], row vector
W_net = W_CP1 + W_dist + W_feed_CP;

% Methanol mass specific heating consumption, [kJ / kg_CH3OH_product],
% row vector
Q_per_kg_CH3OH = Q_net ./ (m_dot_product(1, :) .* ...
    x_mass_product(5, :));

% Methanol mass specific electricity consumption, 
% [kJ / kg_CH3OH_product], row vector
W_per_kg_CH3OH = W_net ./ (m_dot_product(1, :) .* ...
    x_mass_product(5, :));

% --- Yields, conversions, selectivities ---------------------------------

[yield_CO2, conversion_CO2, yield_H2, conversion_H2, selectivity_CO2, ...
    selectivity_H2] = ...
    yld_conv_sel(m_dot_F, y_mass_F, M, m_dot_product, ... 
                 x_mass_product, m_dot_liquid_KO1, x_mass_KO1, ...  
                 m_dot_purge, y_mass_purge);

% --- Plot the results ---------------------------------------------------

%     % Mass fractions into molar fractions for purge stream for plotting
% y_molar_purge = zeros(size(y_mass_purge));
% for t = 1:size(y_mass_purge, 2)
%     y_molar_purge(:, t) = mass_fractions_into_molar_fractions(...
%         y_mass_purge(:, t), M);
% end
% 
% plot_vs_time( ...
%     t_span, ...
%     m_dot_product, ...
%     m_dot_dist_bot, ...
%     m_dot_gas_KO2, ...
%     y_molar_KO2, ...
%     m_dot_purge, ...
%     y_molar_purge, ...
%     Q_per_kg_CH3OH, ...    
%     W_per_kg_CH3OH, ...
%     yield_CO2, ...
%     yield_H2, ...
%     conversion_CO2, ...
%     conversion_H2, ...
%     selectivity_H2, ...
%     selectivity_CO2, ...
%     T_tube_avg, ...
%     T_tube_max, ...
%     r_avg, ...
%     eta_reac_avg, ...
%     a_cat_avg ...
%     )
% 
% % --- Save the results into CSV file -------------------------------------
% 
% path_and_file = csv_vs_time( ...
%     t_span, ...
%     m_dot_product, ...
%     m_dot_dist_bot, ...
%     m_dot_gas_KO2, ...
%     y_molar_KO2, ...
%     m_dot_purge, ...
%     y_molar_purge, ...
%     Q_per_kg_CH3OH, ...    
%     W_per_kg_CH3OH, ...
%     yield_CO2, ...
%     yield_H2, ...
%     conversion_CO2, ...
%     conversion_H2, ...
%     selectivity_H2, ...
%     selectivity_CO2, ...
%     T_tube_avg, ...
%     T_tube_max, ...
%     r_avg, ...
%     eta_reac_avg, ...
%     a_cat_avg, ...
%     case_name);
% 
% disp(['Time dependent results saved to ',path_and_file]);


% A_tube_in = pi * r_tube_in^2;
% % Just for comparing against literature [Arab 2014]
% % Proper values in range of [1, 12]
% WHSV = 3600 * (m_dot_F + m_dot_CP1) / (roo_cat * (1-eps_b) * ...
%        N_tubes * z_tot * A_tube_in); % [1/h]

m_dot_MeOH = m_dot_product * x_mass_product(5, 1);
n_dot_MeOH = 1000 * m_dot_MeOH / M(5,1);

y = [T_tube_max, Q_net, W_net, m_dot_MeOH, n_dot_MeOH, yield_CO2];

end
