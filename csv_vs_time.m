% Function for saving time dependent results in a csv file.
% Author: Kristian Tiiro
% Methanol synthesis loop simulator
% Bio-CCU project
% Date: 13.3.2024

% IN ARRAYS REPRESENTING ALL SIX CHEMICAL COMPONENTS AS ROW ELEMENTS, 
% THE ORDER IS:
% [1.CO2, 
% 2.CO, 
% 3.H2, 
% 4.H2O, 
% 5.CH3OH, 
% 6.N2]

function path_and_file = csv_vs_time( ...
    t_span, ...
    m_dot_product, ...
    m_dot_dist_bot, ...
    m_dot_gas_KO2, ...
    y_molar_KO2, ...
    m_dot_purge, ...
    y_molar_purge, ...
    Q_per_kg_CH3OH, ...    
    W_per_kg_CH3OH, ...
    yield_CO2, ...
    yield_H2, ...
    conversion_CO2, ...
    conversion_H2, ...
    selectivity_H2, ...
    selectivity_CO2, ...
    T_tube_avg, ...
    T_tube_max, ...
    r_avg, ...
    eta_reac_avg, ...
    a_cat_avg, ...
    case_name ...           % string
    )

% Create a table with the simulation results data
results_in_time = array2table([ ...
    t_span; ...
    m_dot_product; ...
    m_dot_dist_bot; ...
    m_dot_gas_KO2; ...
    y_molar_KO2; ...    % matrix
    m_dot_purge; ...
    y_molar_purge; ...  % matrix
    Q_per_kg_CH3OH; ...    
    W_per_kg_CH3OH; ...
    yield_CO2; ...
    yield_H2; ...
    conversion_CO2; ...
    conversion_H2; ...
    selectivity_H2; ...
    selectivity_CO2; ...
    T_tube_avg; ...
    T_tube_max; ...
    r_avg; ...          % matrix
    eta_reac_avg; ...   % matrix
    a_cat_avg]);

% Set column (time instances) names in the table
time_instance_labels = cell(size(t_span));
for i = 1:size(t_span, 2)
    time_instance_labels{i} = ['Time_instance_',num2str(i)];
end
results_in_time.Properties.VariableNames = time_instance_labels;


N_i = size(y_molar_KO2, 1);
% Name the rows (state variables) in the table
    % Component-wise naming for molar fraction vectors
component_text = {'CO2', 'CO', 'H2', 'H2O', 'CH3OH', 'N2'};
y_molar_KO2_row_names = cell(N_i, 1);
y_molar_purge_row_names = cell(N_i, 1);
for i = 1:N_i
    y_molar_KO2_row_names{i} = ['KO2_gas_stream_molar_fraction_' ...
        'of_',component_text{i},'_in_time__unitless'];
    y_molar_purge_row_names{i} = ['Purge_stream_molar_fraction_' ...
        'of_',component_text{i},'_in_time__unitless'];
end
    % Reaction-wise naming for reaction dependent vectors
N_reac = 2;
reaction_text = {'CO2_hydrogenation', 'RWGS'};
r_avg_row_names = cell(N_reac, 1);
eta_reac_avg_row_names = cell(N_reac, 1);
for i = 1:N_reac
    r_avg_row_names{i} = ['Average_kinetic_reaction_rate_' ...
        'of_',reaction_text{i},'_in_time__mol_per_s_kg_cat'];
    eta_reac_avg_row_names{i} = ['Average_reaction_effectiveness_rate_'...
        'of_',reaction_text{i},'_in_time__unitless'];
end
    % Combining all row names
all_row_names = [ ...
    'Time__days'; ...
    'Product_stream_mass_flow_in_time__kg_per_s'; ...
    'Distillate_bottom_stream_mass_flow_in_time__kg_per_s'; ...
    'KO2_gas_stream_mass_flow_in_time__kg_per_s'; ...
    y_molar_KO2_row_names; ...
    'Purge_stream_mass_flow_in_time__kg_per_s'; ...
    y_molar_purge_row_names; ...
    'Net_heat_consumed_per_kg_of_methanol_produced__kJ_per_kg'; ...
    'Net_electricity_consumed_per_kg_of_methanol_produced__kJ_per_kg'; ...
    'Molar_methanol_yield_based_on_CO2__unitless'; ...
    'Molar_methanol_yield_based_on_H2__unitless'; ...
    'Molar_conversion_of_CO2__unitless'; ...
    'Molar_conversion_of_H2__unitless'; ...
    'Molar_methanol_selectivity_based_on_CO2__unitless'; ...
    'Molar_methanol_selectivity_based_on_H2__unitless'; ...
    'Average_temperature_inside_reactor_tubes__K'; ...
    'Maximum_temperature_inside_reactor_tubes__K'; ...
    r_avg_row_names; ...
    eta_reac_avg_row_names; ...
    'Average_catalyst_activity_in_time__unitless';
    ];
    % Add the row names in the table as a new first column
results_in_time = addvars(results_in_time, all_row_names, 'Before', 1, ...
    'NewVariableNames', 'State_variable_name_and_unit');

% Create a CSV filename
when = char(datetime('now', 'Format', 'yyyyMMdd_HHmm'));
csv_filename = [case_name,'_t_results_', when, '.csv'];

% Specify a folder where results are saved
folder = 'simulation_results';
    % Create the folder if it doesn't exist
if ~isfolder(folder)
    mkdir(folder);
end
    % Save the full path
path_and_file = fullfile(folder, csv_filename);

% Write the table to a CSV file
writetable(results_in_time, path_and_file);

end
